blueprint:
  name: Low-battery Notification
  description: Regularly test all sensors with 'battery' device-class for crossing a certain battery level threshold and if so execute an action.
  domain: automation
  source_url: https://github.com/J1A-T13N/blueprints_repo/edit/master/low_battery_notification/low_battery_notification.yaml


  # Blueprint Inputs
  input:
    threshold:
      name: Battery warning level threshold
      description: Battery sensors below threshold are assumed to be low-battery (as well as binary battery sensors with value 'on').
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 5.0

    test_day:
      name: 'Day to test on'
      description: 'Run test day'
      selector:
        select:
          mode: 'dropdown'
          multiple: true
          options:
            - label: 'Monday'
              value: '0'
            - label: 'Tueday'
              value: '1'
            - label: 'Wednesday'
              value: '2'
            - label: 'Thursday'
              value: '3'
            - label: 'Friday'
              value: '4'
            - label: 'Saturday'
              value: '5'
            - label: 'Sunday'
              value: '6'

    test_time:
      name: Time to test on
      description: Test is run at configured time
      default: '10:00:00'
      selector:
        time: {}

    exclude:
      name: Excluded Sensors
      description: Battery sensors (e.g. smartphone) to exclude from detection. Only entities are supported, areas and devices must be expanded!
      default: {}
      selector:
        target:
          entity:
            device_class: battery

    actions:
      name: Actions
      description: Notifications or similar to be run. {{sensors}} is replaced with the names of sensors being low on battery.
      selector:
        action:


variables:
  threshold: !input 'threshold'
  current_day: '{{ now().weekday() | int }}'
  test_day: !input 'test_day'
  exclude: !input 'exclude'
  sensors: >-
    {% set low_battery_entity = namespace(fields=[], excludedEntities = []) %}
    {% if exclude.entity_id is defined %} 
        {% set low_battery_entity.excludedEntities = low_battery_entity.excludedEntities + exclude.entity_id %}
    {% endif %}
    {% if exclude.device_id is defined %}
      {% for device_id in exclude.device_id %}
        {% set low_battery_entity.excludedEntities = low_battery_entity.excludedEntities + device_entities(device_id) %}
      {% endfor %}
    {% endif %}
    {% for entity in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
      {% set field = {
        "entity_id": entity.entity_id,
        "name": entity.name,
        "area_name":  '' if area_name(entity.entity_id) is none else area_name(entity.entity_id),
        "state": entity.state
      } %}
      {% if 0 <= field.state | int(-1) < threshold | int and not field.entity_id in low_battery_entity.excludedEntities %}
          {% set low_battery_entity.fields = low_battery_entity.fields + [field] %}
      {% endif %}
    {% endfor %}
    {% for entity in states.binary_sensor | selectattr('attributes.device_class', '==', 'battery') | selectattr('state', '==', 'on') %}
      {% set field = {
        "entity_id": entity.entity_id,
        "name": entity.name,
        "area_name":  '' if area_name(entity.entity_id) is none else area_name(entity.entity_id),
        "state": entity.state
      } %}
      {% if not field.entity_id in low_battery_entity.excludedEntities %}
        {% set low_battery_entity.fields = low_battery_entity.fields + [field] %}
      {% endif %}
    {% endfor %}
    {{ low_battery_entity.fields }}
  sensors_text: >-
    {% set low_battery_entity = namespace(fields=[], excludedEntities = []) %}
    {% if exclude.entity_id is defined %} 
        {% set low_battery_entity.excludedEntities = low_battery_entity.excludedEntities + exclude.entity_id %}
    {% endif %}
    {% if exclude.device_id is defined %}
      {% for device_id in exclude.device_id %}
        {% set low_battery_entity.excludedEntities = low_battery_entity.excludedEntities + device_entities(device_id) %}
      {% endfor %}
    {% endif %}
    {% for entity in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
      {% if 0 <= entity.state | int(-1) < threshold | int and not entity.entity_id in low_battery_entity.excludedEntities %}
          {% set low_battery_entity.fields = low_battery_entity.fields + [entity.name ~ ' (' ~ entity.state ~ ' %)'] %}
      {% endif %}
    {% endfor %}
    {% for entity in states.binary_sensor | selectattr('attributes.device_class', '==', 'battery') | selectattr('state', '==', 'on') %}
      {% if not entity.entity_id in low_battery_entity.excludedEntities %}
        {% set low_battery_entity.fields = low_battery_entity.fields + [entity.name] %}
      {% endif %}
    {% endfor %}
    {{"â¤µ \n- "}}{{low_battery_entity.fields|join('\n- ')}}


# Triggers
trigger:
  - platform: time
    at: !input 'test_time'


# Conditions used to determine if the automation should run for the specific trigger event
condition:
# Check if the automation is supposed to be executed during that specific weekday
  - condition: template
    value_template: >-
        {{ current_day in test_day | int }}


  # Check if the sensors list is not empty
  - condition: template
    value_template: >-
        {{ sensors_text|string|length > 0 and sensors|length > 0 }}


# Actions
action:
  - choose: []
    default: !input 'actions'
  
mode: single
max_exceeded: silent
