blueprint:
  name: Low battery notification
  description: Regularly test all sensors with 'battery' device-class for crossing a certain battery level threshold and if so execute an action.
  domain: automation
  source_url: https://github.com/gmlupatelli/blueprints_repo/blob/master/low_battery_notification/low_battery_notification.yaml


  # Blueprint Inputs
  input:
    threshold:
      name: Battery warning level threshold
      description: Battery sensors below threshold are assumed to be low-battery (as well as binary battery sensors with value 'on').
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 5.0

    test_day:
      name: 'Monday'
      description: 'Run test day'
      selector:
        select:
          options:
            - label: Monday
              value: 0
            - label: Tueday
              value: 1
            - label: Wednesday
              value: 2
            - label: Thursday
              value: 3
            - label: Friday
              value: 4
            - label: Saturday
              value: 5
            - label: Sunday
              value: 6
          multiple: true

    test_time:
      name: Time to test on
      description: Test is run at configured time
      default: '10:00:00'
      selector:
        time: {}

    exclude:
      name: Excluded Sensors
      description: Battery sensors (e.g. smartphone) to exclude from detection. Only entities are supported, areas and devices must be expanded!
      default: {}
      selector:
        target:
          entity:
            device_class: battery

    actions:
      name: Actions
      description: Notifications or similar to be run. {{sensors}} is replaced with the names of sensors being low on battery.
      selector:
        action:


variables:
  threshold: !input 'threshold'
  current_day: '{{ now().weekday() | int }}'
  test_day: !input 'test_day'
  exclude: !input 'exclude'
  sensors: >-
    {% set result = namespace(sensors=[]) %}
    {% for state in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
      {% if exclude.entity_id is defined %}
        {% if 0 <= state.state | int(-1) < threshold | int and not state.entity_id in exclude.entity_id %}
          {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ ' %)'] %}
        {% endif %}
      {% else %}
        {% if 0 <= state.state | int(-1) < threshold | int %}
          {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ ' %)'] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {% for state in states.binary_sensor | selectattr('attributes.device_class', '==', 'battery') | selectattr('state', '==', 'on') %}
      {% if exclude.entity_id is defined %}
        {% if not state.entity_id in exclude.entity_id %}
          {% set result.sensors = result.sensors + [state.name] %}
        {% endif %}
      {% else %}
        {% set result.sensors = result.sensors + [state.name] %}
      {% endif %}
    {% endfor %}
    {{"⤵ \n- "}}{{result.sensors|join('\n- ')}}


# Triggers
trigger:
  - platform: time
    at: !input 'test_time'


# Conditions used to determine if the automation should run for the specific trigger event
condition:
# Check if the automation is supposed to be executed during that specific weekday
  - condition: template
    value_template: >-
        {{ current_day in test_day }}


  # Check if the sensors list is not empty
  - condition: template
    value_template: >-
        {{ sensors != "⤵ \n-"}}


# Actions
action:
  - choose: []
    default: !input 'actions'
  
mode: single
max_exceeded: silent
